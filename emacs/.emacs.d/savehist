;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(file-name-history buffer-name-history minibuffer-history extended-command-history))
(setq file-name-history '("~/emacs.d/" "~/emacs.d/init.el" "~/emacs.d/ini" "~/.emacs.d/init.el"))
(setq buffer-name-history '("*unsent mail*" "*Messages*" "*scratch*" "*Help*" "init.el" "*Packages*"))
(setq minibuffer-history '("sola"))
(setq extended-command-history '("eval-buffer" "ace-jump-mode" "load-theme" "color-theme-solarized" "dired"))
(setq kill-ring '("find / -iname \"*.mp3\" -exec mv {}" "Error (use-package): helm :init: Cannot open load file: No such file or directory, helm-config" #("mkdir ~/Dropbox/filer" 0 21 (fontified t)) #("DIRECTORY" 0 9 (face font-lock-string-face fontified t)) "if [ -d \"$DIRECTORY\" ]; then
  # Control will enter here if $DIRECTORY exists.
fi" "command-execute: Cannot open load file: No such file or directory, helm" "(require 'projectile)" #("(package-initialize) ;; Don't delete this. It will be readded automatically.

" 0 21 (fontified t) 21 24 (fontified t face font-lock-comment-delimiter-face) 24 76 (fontified t face font-lock-comment-face) 76 77 (fontified t) 77 78 (fontified t)) "(require 'package)
(add-to-list 'package-archives
             '(\"melpa\" . \"https://melpa.org/packages/\") t)
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '(\"gnu\" . \"https://elpa.gnu.org/packages/\")))
(package-initialize)" #("(use-package helm-projectile)" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 28 (fontified t face font-lock-constant-face) 28 29 (fontified t)) "(unless (assoc-default \"melpa\" package-archives)
  (add-to-list 'package-archives '(\"melpa\" . \"http://melpa.org/packages/\") t)
;  (package-refresh-contents)
)" "(use-package projectile
  :diminish projectile-mode
  :config
  (progn
    (setq projectile-keymap-prefix (kbd \"C-c p\"))
    (setq projectile-completion-system 'default)
    (setq projectile-enable-caching t)
    (setq projectile-indexing-method 'alien)
    (add-to-list 'projectile-globally-ignored-files \"node-modules\"))
  :config
  (projectile-global-mode))
(use-package helm-projectile)" "(add-hook
 'after-init-hook
 (lambda ()
   (require 'helm-config)
   (helm-mode 1)))" "Error (use-package): helm :init: Cannot open load file: No such file or directory, helm-config" "(use-package helm
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :bind ((\"C-c h\" . helm-mini)
         (\"C-h a\" . helm-apropos)
         (\"C-x C-b\" . helm-buffers-list)
         (\"C-x b\" . helm-buffers-list)
         (\"M-y\" . helm-show-kill-ring)
         (\"M-x\" . helm-M-x)
         (\"C-x c o\" . helm-occur)
         (\"C-x c s\" . helm-swoop)
         (\"C-x c y\" . helm-yas-complete)
         (\"C-x c Y\" . helm-yas-create-snippet-on-region)
         (\"C-x c b\" . my/helm-do-grep-book-notes)
         (\"C-x c SPC\" . helm-all-mark-rings)))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally" "Opening TLS connection with `gnutls-cli --insecure -p 443 melpa.org'...failed" "url-insert-file-contents: https://melpa.org/packages/helm-core-2.3.3.tar: Not found" "(use-package helm
  :ensure    helm

  :config    (setq helm-ff-transformer-show-only-basename nil
                   helm-adaptive-history-file             ers-helm-adaptive-history-file
                   helm-boring-file-regexp-list           '(\"\\\\.git$\" \"\\\\.svn$\" \"\\\\.elc$\")
                   helm-yank-symbol-first                 t
                   helm-buffers-fuzzy-matching            t
                   helm-ff-auto-update-initial-value      t
                   helm-input-idle-delay                  0.1
                   helm-idle-delay                        0.1)

  :init      (progn
               (require 'helm-config)
               (helm-mode t)
               (helm-adaptative-mode t)

               (use-package helm-ag
                 :ensure    helm-ag
                 :bind      (\"C-c a\" . helm-ag))

               (use-package helm-descbinds
                 :ensure    helm-descbinds
                 :bind      (\"C-h b\"   . helm-descbinds))

               (use-package helm-projectile
                 :ensure    helm-projectile
                 :bind      (\"C-c h\" . helm-projectile))

               (add-hook 'eshell-mode-hook
                         #'(lambda ()
                             (bind-key \"M-p\" 'helm-eshell-history eshell-mode-map)))

               (use-package helm-swoop
                 :ensure    helm-swoop
                 :bind      ((\"C-c o\" . helm-swoop)
                             (\"C-c M-o\" . helm-multi-swoop)))

               (bind-key \"C-c C-SPC\" 'helm-ff-run-toggle-auto-update helm-find-files-map))

  :bind ((\"C-x r l\" . helm-bookmarks)
         (\"C-x C-m\" . helm-M-x)
         (\"C-h i\"   . helm-google-suggest)
         (\"M-y\"     . helm-show-kill-ring)
         (\"C-h a\"   . helm-apropos)
         (\"C-x C-f\" . helm-find-files)
         (\"C-x p\" .   helm-top)
         (\"C-x C-b\" . helm-buffers-list))

  :diminish helm-mode)" "(require 'package)
(add-to-list 'package-archives
             '(\"melpa\" . \"https://melpa.org/packages/\") t)
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '(\"gnu\" . \"https://elpa.gnu.org/packages/\")))
(package-initialize)" #(";; helm >>
(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :bind ((\"C-c h\" . helm-mini)
         (\"C-h a\" . helm-apropos)
         (\"C-x C-b\" . helm-buffers-list)
         (\"C-x b\" . helm-buffers-list)
         (\"M-y\" . helm-show-kill-ring)
         (\"M-x\" . helm-M-x)
         (\"C-x c o\" . helm-occur)
         (\"C-x c s\" . helm-swoop)
         (\"C-x c y\" . helm-yas-complete)
         (\"C-x c Y\" . helm-yas-create-snippet-on-region)
         (\"C-x c b\" . my/helm-do-grep-book-notes)
         (\"C-x c SPC\" . helm-all-mark-rings)))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally
" 0 11 (fontified t face font-lock-comment-face) 11 12 (fontified t) 12 23 (fontified t face font-lock-keyword-face) 23 24 (fontified t) 24 28 (fontified t face font-lock-constant-face) 28 31 (fontified t) 31 38 (fontified t face font-lock-builtin-face) 38 43 (fontified t) 43 52 (fontified t face font-lock-builtin-face) 52 65 (fontified t) 65 70 (fontified t face font-lock-builtin-face) 70 74 (fontified t) 74 79 (fontified t face font-lock-keyword-face) 79 85 (fontified t) 85 92 (fontified t face font-lock-keyword-face) 92 94 (fontified t) 94 105 (fontified t face font-lock-constant-face) 105 154 (fontified t) 154 157 (fontified t face font-lock-comment-delimiter-face) 157 204 (fontified t face font-lock-comment-face) 204 234 (fontified t) 234 236 (fontified t face font-lock-comment-delimiter-face) 236 279 (fontified t face font-lock-comment-face) 279 317 (fontified t) 317 319 (fontified t face font-lock-comment-delimiter-face) 319 348 (fontified t face font-lock-comment-face) 348 388 (fontified t) 388 390 (fontified t face font-lock-comment-delimiter-face) 390 413 (fontified t face font-lock-comment-face) 413 459 (fontified t) 459 587 (fontified t) 587 592 (fontified t face font-lock-builtin-face) 592 595 (fontified t) 595 602 (fontified t face font-lock-string-face) 602 626 (fontified t) 626 633 (fontified t face font-lock-string-face) 633 660 (fontified t) 660 669 (fontified t face font-lock-string-face) 669 701 (fontified t) 701 708 (fontified t face font-lock-string-face) 708 740 (fontified t) 740 745 (fontified t face font-lock-string-face) 745 779 (fontified t) 779 784 (fontified t face font-lock-string-face) 784 807 (fontified t) 807 816 (fontified t face font-lock-string-face) 816 841 (fontified t) 841 850 (fontified t face font-lock-string-face) 850 875 (fontified t) 875 884 (fontified t face font-lock-string-face) 884 916 (fontified t) 916 925 (fontified t face font-lock-string-face) 925 963 (fontified t) 963 973 (fontified t) 973 982 (fontified t face font-lock-string-face) 982 1023 (fontified t) 1023 1034 (fontified t face font-lock-string-face) 1034 1060 (fontified t) 1060 1074 (fontified t) 1074 1077 (fontified t face font-lock-comment-delimiter-face) 1077 1129 (fontified t face font-lock-comment-face)) "Dropbox/rails_projects/hello_world/" "(require 'package)
(setq package-enable-at-startup nil)   ; To prevent initialising twice
(add-to-list 'package-archives '(\"melpa\" . \"https://stable.melpa.org/packages/\"))

(package-initialize)" "(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
" #("(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
" 0 1 (fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 104 (fontified t) 104 105 (rear-nonsticky t fontified t) 105 106 (fontified t) 106 107 (fontified t) 107 108 (fontified t) 108 125 (face font-lock-keyword-face fontified t) 125 126 (fontified t) 126 129 (fontified t) 129 136 (face font-lock-keyword-face fontified t) 136 138 (fontified t) 138 149 (face font-lock-constant-face fontified t) 149 150 (fontified t) 150 151 (fontified t rear-nonsticky t) 151 152 (fontified t)) "(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))" "(eval-when-compile
  (require 'use-package))" "    (require 'color-theme)
" "(defvar my-packages
  '(ack-and-a-half auctex clojure-mode coffee-mode deft expand-region
                   gist groovy-mode haml-mode haskell-mode inf-ruby
                   magit magithub markdown-mode paredit projectile python
                   sass-mode rainbow-mode scss-mode solarized-theme
                   volatile-highlights yaml-mode yari zenburn-theme)
  \"A list of packages to ensure are installed at launch.\")
" "(add-to-list 'package-archives '(\"marmalade\" . \"http://marmalade-repo.org/packages/\"))
" "(require 'package)
(package-initialize)" #("cups" 0 4 (fontified t)) #("etags-table" 0 5 (fontified t) 5 11 (fontified t)) #("cups" 0 4 (fontified t)) #("jsm" 0 3 (fontified t)) #("jsm" 0 3 (fontified t)) "(setq jsm-packages
      (append
       '(cups ace-jump-mode yaml-mode color-theme color-theme-solarized lua-mode
              etags-select etags-table markdown-mode cups cl-lib magit htmlize)

       (mapcar 'el-get-as-symbol (mapcar 'el-get-source-name el-get-sources))))

(el-get 'sync jsm-packages)" #(";; helm >>" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 10 (fontified t face font-lock-comment-face)) "(use-package helm
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :bind ((\"C-c h\" . helm-mini)
         (\"C-h a\" . helm-apropos)
         (\"C-x C-b\" . helm-buffers-list)
         (\"C-x b\" . helm-buffers-list)
         (\"M-y\" . helm-show-kill-ring)
         (\"M-x\" . helm-M-x)
         (\"C-x c o\" . helm-occur)
         (\"C-x c s\" . helm-swoop)
         (\"C-x c y\" . helm-yas-complete)
         (\"C-x c Y\" . helm-yas-create-snippet-on-region)
         (\"C-x c b\" . my/helm-do-grep-book-notes)
         (\"C-x c SPC\" . helm-all-mark-rings)))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally" #(";; history >>" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 13 (fontified t face font-lock-comment-face)) "(setq savehist-file \"~/.emacs.d/savehist\")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))" #(";; color-theme;; color-theme;; color-theme;; color-theme;; color-theme;; color-theme" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 13 (fontified t face font-lock-comment-face) 13 14 (rear-nonsticky t fontified t face font-lock-comment-face) 14 17 (fontified t face font-lock-comment-face) 17 27 (fontified t face font-lock-comment-face) 27 28 (rear-nonsticky t fontified t face font-lock-comment-face) 28 31 (fontified t face font-lock-comment-face) 31 41 (fontified t face font-lock-comment-face) 41 42 (rear-nonsticky t fontified t face font-lock-comment-face) 42 45 (fontified t face font-lock-comment-face) 45 55 (fontified t face font-lock-comment-face) 55 56 (rear-nonsticky t fontified t face font-lock-comment-face) 56 59 (fontified t face font-lock-comment-face) 59 69 (fontified t face font-lock-comment-face) 69 70 (rear-nonsticky t fontified t face font-lock-comment-face) 70 73 (fontified t face font-lock-comment-face) 73 83 (fontified t face font-lock-comment-face) 83 84 (rear-nonsticky t fontified t face font-lock-comment-face)) #(";; Emacs 22 Only" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 16 (fontified t face font-lock-comment-face)) #(";(set-face-background 'highlight \"#330\")  ;; Emacs 21 Only
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 58 (face font-lock-comment-face fontified t) 58 59 (fontified t rear-nonsticky t)) #(";; To customize the background color
" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 36 (face font-lock-comment-face fontified t) 36 37 (fontified t)) #(";; el-get" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 9 (fontified t face font-lock-comment-face)) #("
" 0 1 (fontified t)) #(";; color-theme" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 14 (fontified t face font-lock-comment-face)) #(";; highlight line" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 17 (fontified t face font-lock-comment-face)) #("
(global-hl-line-mode 1)
 
;; To customize the background color
(set-face-background 'hl-line \"#330\")  ;; Emacs 22 Only
;(set-face-background 'highlight \"#330\")  ;; Emacs 21 Only
" 0 27 (fontified t) 27 30 (fontified t face font-lock-comment-delimiter-face) 30 64 (fontified t face font-lock-comment-face) 64 94 (fontified t) 94 100 (fontified t face font-lock-string-face) 100 103 (fontified t) 103 106 (fontified t face font-lock-comment-delimiter-face) 106 120 (fontified t face font-lock-comment-face) 120 121 (fontified t face font-lock-comment-delimiter-face) 121 179 (fontified t face font-lock-comment-face)) #("

(add-to-list 'load-path \"~/.emacs.d/el-get/el-get\")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       \"https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el\")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path \"~/.emacs.d/el-get-user/recipes\")
(el-get 'sync)



" 0 1 (fontified t) 1 2 (fontified t) 2 26 (fontified t) 26 52 (fontified t face font-lock-string-face) 52 56 (fontified t) 56 62 (fontified t face font-lock-keyword-face) 62 64 (fontified t) 64 71 (fontified t face font-lock-keyword-face) 71 73 (fontified t) 73 79 (fontified t face font-lock-constant-face) 79 97 (fontified t) 97 116 (fontified t face font-lock-keyword-face) 116 158 (fontified t) 158 233 (fontified t face font-lock-string-face) 233 235 (fontified t) 235 326 (fontified t) 326 358 (fontified t face font-lock-string-face) 358 375 (fontified t) 375 376 (rear-nonsticky t fontified t) 376 377 (fontified t) 377 378 (fontified t)) #("(add-to-list 'load-path \"~/.emacs.d/el-get/el-get\")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       \"https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el\")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path \"~/.emacs.d/el-get-user/recipes\")
(el-get 'sync)

" 0 24 (fontified t) 24 50 (fontified t face font-lock-string-face) 50 54 (fontified t) 54 60 (fontified t face font-lock-keyword-face) 60 62 (fontified t) 62 69 (fontified t face font-lock-keyword-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-constant-face) 77 95 (fontified t) 95 114 (fontified t face font-lock-keyword-face) 114 156 (fontified t) 156 231 (fontified t face font-lock-string-face) 231 324 (fontified t) 324 356 (fontified t face font-lock-string-face) 356 374 (fontified t)) #("(message \"loaded color config\")
(require 'emacs-color-themes)
;(load-theme 'solarized-dark)
(load-theme 'monokai)
" 0 9 (fontified t) 9 30 (fontified t face font-lock-string-face) 30 33 (fontified t) 33 40 (fontified t face font-lock-keyword-face) 40 42 (fontified t) 42 60 (fontified t face font-lock-constant-face) 60 62 (fontified t) 62 63 (fontified t face font-lock-comment-delimiter-face) 63 92 (fontified t face font-lock-comment-face) 92 114 (fontified t))))
(setq search-ring '("pack" "helm" "use"))
(setq regexp-search-ring 'nil)
